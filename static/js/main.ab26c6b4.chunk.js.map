{"version":3,"sources":["crypto/structures/lDogeBuilder.js","crypto/structures/lDogeTransaction.js","crypto/utils/Constants.js","crypto/structures/unspentTransaction.js","crypto/structures/Errors.js","crypto/structures/Wallet.js","crypto/utils/walletProxy.js","components/Wallet.jsx","App.jsx","crypto/utils/walletUtils.js","index.jsx","theme.js","crypto/utils/bufferWriter.js","crypto/utils/bufferUtils.js"],"names":["Sighash","SCRIPT_TYPES","LitedogeBuilder","network","litedogeTransaction","LitedogeTransaction","previousTransactionSet","inputs","locktime","this","version","txHash","vout","sequence","prevOutScript","txBuffer","LitedogeBufferutils","reverseBuffer","Buffer","from","addInputUnsafe","value","publicHash","scriptPubKey","address","decodeBase58","payload","bs58check","length","TypeError","readUInt8","hash","slice","fromBase58Check","e","console","error","pubKeyHash","payments","p2pkh","output","scriptHash","p2sh","Error","toOutputScript","addOutput","signParams","keyPair","redeemScript","hashType","trySign","getSigningData","needsOutputs","bind","scriptSig","inputScript","prevTxOut","toString","undefined","input","expandInput","prevOutType","pubkeys","signatures","expanded","expandOutput","type","vin","addInput","ssType","chunks","script","decompile","check","multisig","pubKey","pubkey","signature","p2pk","outputScript","ourPubKey","pkh1","pkh2","crypto","hash160","equals","signatureHash","useLowR","signed","entries","i","sign","encode","tx","publicKey","getPublicKey","canSign","prepared","prepareInput","Object","assign","hashForSignature","signScript","time","setTime","Math","floor","Date","now","outputs","litedogeClone","forEach","result","paymentBuild","setInputScript","p2wpkh","redeem","redeemScriptType","signType","signingHashType","some","signatureHashType","buffer","TransactionBuilder","witnessPubKeyHash","witnessScriptHash","witnessCommitment","nullData","EMPTY_SCRIPT","allocUnsafe","ZERO","ONE","VALUE_UINT64_MAX","BLANK_OUTPUT","valueBuffer","options","someScript","varuint","index","DEFAULT_SEQUENCE","log","push","inIndex","ourScript","compile","filter","x","OPS","OP_CODESEPARATOR","txTmp","y","Transaction","SIGHASH_ANYONECANPAY","byteLength","writeInt32LE","toLitedogeBuffer","bcrypto","hash256","bufferWriter","tbuffer","hashOutputs","hashPrevouts","hashSequence","LitedogeBufferwriter","txIn","writeSlice","writeUInt32","txOutsSize","reduce","sum","varSliceSize","out","writeUInt64","writeVarSlice","newTx","map","txOut","getHash","initialOffset","toBuffer","writeVarInt","isOutput","offset","liteDogeNetwork","messagePrefix","bech32","bip32","public","private","wif","proxyWalletUrl","lDogeDenominator","unspentTransaction","txid","amount","confirmations","spendable","solvable","InsufficientLitedoge","Wallet","wifData","pLiteDogeAddress","pLiteDogeWif","litedogeAddress","fetch","method","then","text","json","data","raw","UnspentTransaction","receiverAddress","a","amountInSats","amountAndFees","signer","liteDogeKeyPair","unspentTransactions","referencedTransactions","totalInputAmount","returnToSenderAmount","transactionBuilder","setLockTime","setTimeToCurrentTime","setVersion","setLowR","referencedTransaction","transaction","build","transactionHex","toHex","hex","body","JSON","stringify","transactionData","props","wallet","useState","sendMode","setSendMode","receiveMode","setReceiveMode","ldogeUSDRate","setRate","walletBalance","setBalance","ldogeAmount","setAmount","usdAmount","setUSDAmount","useEffect","market_data","current_price","balance","$","on","receiverAddr","val","attr","createPayment","inputAmount","addClass","removeClass","className","id","sx","display","flexDirection","justifyContent","alignItems","src","alt","height","width","flexShrink","htmlFor","name","onChange","event","abs","setAmountHook","target","setUSDAmountHook","disabled","App","setWallet","importedWallet","privateKey","importedKeyPair","ECPair","fromWIF","validate","importWallet","css","ReactDOM","render","StrictMode","theme","fonts","heading","monospace","colors","background","primary","document","getElementById","writeUInt8","writeUInt32LE","writeUInt64LE","bytes","copy","vector","buf","verifuint","max","j","tmp"],"mappings":"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","file":"static/js/main.ab26c6b4.chunk.js","sourcesContent":["/* eslint-disable no-shadow */\n/* eslint-disable max-len */\n/* eslint-disable no-continue */\n/* eslint-disable no-use-before-define */\nimport {\n  payments, TransactionBuilder, crypto, script,\n} from 'bitcoinjs-lib';\nimport * as bs58check from 'bs58check';\n\nimport { multisig } from 'bitcoinjs-lib/src/templates/multisig';\nimport nullData from 'bitcoinjs-lib/src/templates/nulldata';\nimport pubKey from 'bitcoinjs-lib/src/templates/pubkey';\nimport pubKeyHash from 'bitcoinjs-lib/src/templates/pubkeyhash';\nimport scriptHash from 'bitcoinjs-lib/src/templates/scripthash';\nimport witnessCommitment from 'bitcoinjs-lib/src/templates/witnesscommitment';\nimport witnessPubKeyHash from 'bitcoinjs-lib/src/templates/witnesspubkeyhash';\nimport witnessScriptHash from 'bitcoinjs-lib/src/templates/witnessscripthash';\nimport LitedogeBufferutils from '../utils/bufferUtils';\nimport LitedogeTransaction from './lDogeTransaction';\n\nconst Sighash = {\n  SIGHASH_ALL: 1,\n  SIGHASH_NONE: 2,\n  SIGHASH_SINGLE: 3,\n  SIGHASH_ANYONECANPAY: 128,\n};\n\nconst SCRIPT_TYPES = {\n  P2MS: 'multisig',\n  NONSTANDARD: 'nonstandard',\n  NULLDATA: 'nulldata',\n  P2PK: 'pubkey',\n  P2PKH: 'pubkeyhash',\n  P2SH: 'scripthash',\n  P2WPKH: 'witnesspubkeyhash',\n  P2WSH: 'witnessscripthash',\n  WITNESS_COMMITMENT: 'witnesscommitment',\n};\n\nexport default class LitedogeBuilder extends TransactionBuilder {\n  constructor(network) {\n    super(network);\n    this.litedogeTransaction = new LitedogeTransaction();\n    this.previousTransactionSet = {};\n    this.inputs = [];\n  }\n\n  setLockTime(locktime) {\n    this.litedogeTransaction.locktime = locktime;\n  }\n\n  setVersion(version) {\n    this.litedogeTransaction.version = version;\n  }\n\n  addInput(txHash, vout, sequence, prevOutScript) {\n    let value;\n    const txBuffer = LitedogeBufferutils.reverseBuffer(Buffer.from(txHash, 'hex'));\n\n    return this.addInputUnsafe(txBuffer, vout, sequence, prevOutScript, value);\n  }\n\n  addOutput(publicHash, value) {\n    const scriptPubKey = toOutputScript(publicHash, this.network);\n    return this.litedogeTransaction.addOutput(scriptPubKey, value);\n  }\n\n  sign(\n    signParams,\n    keyPair,\n    redeemScript,\n    hashType,\n  ) {\n    this.trySign(\n      this.getSigningData(\n        this.network,\n        this.inputs,\n        this.needsOutputs.bind(this),\n        this.litedogeTransaction,\n        signParams,\n        keyPair,\n        redeemScript,\n        hashType,\n        false,\n      ),\n    );\n  }\n\n  addInputUnsafe(txHash,\n    vout,\n    sequence,\n    prevOutScript,\n    value,\n    scriptSig,\n    inputScript) {\n    const prevTxOut = `${txHash.toString('hex')}:${vout}`;\n    if (this.previousTransactionSet[prevTxOut] !== undefined) {\n      throw new Error(`Duplicate TxOut: ${prevTxOut}`);\n    }\n    // eslint-disable-next-line no-shadow\n    let input = {};\n    // derive what we can from the scriptSig\n    if (inputScript !== undefined) {\n      input = this.expandInput(inputScript);\n    }\n    // if an input value was given, retain it\n    if (value !== undefined) {\n      input.value = value;\n    }\n    // derive what we can from the previous transactions output script\n    if (!input.prevOutScript && prevOutScript) {\n      let prevOutType;\n      if (!input.pubkeys && !input.signatures) {\n        const expanded = this.expandOutput(prevOutScript);\n        if (expanded.pubkeys) {\n          input.pubkeys = expanded.pubkeys;\n          input.signatures = expanded.signatures;\n        }\n        prevOutType = expanded.type;\n      }\n      input.prevOutScript = prevOutScript;\n      input.prevOutType = prevOutType || output(prevOutScript);\n    }\n    const vin = this.litedogeTransaction.addInput(\n      txHash,\n      vout,\n      sequence,\n      scriptSig,\n    );\n    this.inputs[vin] = input;\n    this.previousTransactionSet[prevTxOut] = true;\n    return vin;\n  }\n\n  expandInput(scriptSig, type) {\n    if (scriptSig.length === 0) {\n      return {};\n    }\n    if (!type) {\n      let ssType = input(scriptSig);\n      if (ssType === SCRIPT_TYPES.NONSTANDARD) {\n        ssType = undefined;\n      }\n      // eslint-disable-next-line no-param-reassign\n      type = ssType;\n    }\n    // eslint-disable-next-line default-case\n    switch (type) {\n      case SCRIPT_TYPES.P2PKH: {\n        // eslint-disable-next-line no-shadow\n        const { output, pubkey, signature } = payments.p2pkh({\n          input: scriptSig,\n          network: this.network,\n        });\n        return {\n          prevOutScript: output,\n          prevOutType: SCRIPT_TYPES.P2PKH,\n          pubkeys: [pubkey],\n          signatures: [signature],\n        };\n      }\n      case SCRIPT_TYPES.P2PK: {\n        const { signature } = payments.p2pk({\n          input: scriptSig,\n          network: this.network,\n        });\n        return {\n          prevOutType: SCRIPT_TYPES.P2PK,\n          pubkeys: [undefined],\n          signatures: [signature],\n        };\n      }\n    }\n    return {\n      prevOutType: SCRIPT_TYPES.NONSTANDARD,\n      prevOutScript: scriptSig,\n    };\n  }\n\n  expandOutput(outputScript, ourPubKey) {\n    const type = output(outputScript);\n    // eslint-disable-next-line default-case\n    switch (type) {\n      case SCRIPT_TYPES.P2PKH: {\n        if (!ourPubKey) {\n          return { type };\n        }\n        // does our hash160(pubKey) match the output scripts?\n        const pkh1 = payments.p2pkh({\n          output: outputScript,\n          network: this.network,\n        }).hash;\n        const pkh2 = crypto.hash160(ourPubKey);\n        if (!pkh1.equals(pkh2)) {\n          return { type };\n        }\n        return {\n          type,\n          pubkeys: [ourPubKey],\n          signatures: [undefined],\n        };\n      }\n      case SCRIPT_TYPES.P2PK: {\n        const p2pk = payments.p2pk({\n          output: outputScript,\n          network: this.network,\n        });\n        return {\n          type,\n          pubkeys: [p2pk.pubkey],\n          signatures: [undefined],\n        };\n      }\n    }\n    return { type };\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  trySign({\n    // eslint-disable-next-line no-shadow\n    input,\n    ourPubKey,\n    keyPair,\n    signatureHash,\n    hashType,\n    useLowR,\n  }) {\n    // enforce in order signing of public keys\n    let signed = false;\n    // eslint-disable-next-line no-shadow\n    for (const [i, pubKey] of input.pubkeys.entries()) {\n      if (!ourPubKey.equals(pubKey)) {\n        continue;\n      }\n      if (input.signatures[i]) {\n        throw new Error('Signature already exists');\n      }\n      const signature = keyPair.sign(signatureHash, useLowR);\n      // eslint-disable-next-line no-param-reassign\n      input.signatures[i] = script.signature.encode(signature, hashType);\n      signed = true;\n    }\n    if (!signed) {\n      throw new Error('Key pair cannot sign for this input');\n    }\n  }\n\n  getSigningData(\n    network,\n    inputs,\n    needsOutputs,\n    tx,\n    signParams,\n    keyPair,\n    redeemScript,\n    hashType = Sighash.SIGHASH_ALL,\n    useLowR,\n  ) {\n    const vin = signParams;\n    if (keyPair === undefined) {\n      throw new Error('sign requires keypair');\n    }\n    // TODO: remove keyPair.network matching in 4.0.0\n    if (keyPair.network && keyPair.network !== network) {\n      throw new TypeError('Inconsistent network');\n    }\n    if (!inputs[vin]) {\n      throw new Error(`No input at index: ${vin}`);\n    }\n    if (needsOutputs(hashType)) {\n      throw new Error('Transaction needs outputs');\n    }\n    // eslint-disable-next-line no-shadow\n    const input = inputs[vin];\n    // if redeemScript was previously provided, enforce consistency\n    if (\n      input.redeemScript !== undefined\n      && redeemScript\n      && !input.redeemScript.equals(redeemScript)\n    ) {\n      throw new Error('Inconsistent redeemScript');\n    }\n    const ourPubKey = keyPair.publicKey || (keyPair.getPublicKey && keyPair.getPublicKey());\n    if (!this.canSign(input)) {\n      if (!this.canSign(input)) {\n        const prepared = this.prepareInput(\n          input,\n          ourPubKey,\n          redeemScript,\n        );\n        // updates inline\n        Object.assign(input, prepared);\n      }\n      if (!this.canSign(input)) {\n        throw Error(`${input.prevOutType} not supported`);\n      }\n    }\n    // ready to sign\n    const signatureHash = tx.hashForSignature(vin, input.signScript, hashType);\n    return {\n      input,\n      ourPubKey,\n      keyPair,\n      signatureHash,\n      hashType,\n      useLowR: !!useLowR,\n    };\n  }\n\n  setTime(time) {\n    this.litedogeTransaction.time = time;\n  }\n\n  setTimeToCurrentTime() {\n    this.setTime(Math.floor(Date.now() / 1000));\n  }\n\n  build() {\n    if (!this.litedogeTransaction.inputs.length) {\n      throw new Error('Transaction has no inputs');\n    }\n    if (!this.litedogeTransaction.outputs.length) {\n      throw new Error('Transaction has no outputs');\n    }\n\n    const tx = this.litedogeTransaction.litedogeClone();\n    // create script signatures from inputs\n    // eslint-disable-next-line no-shadow\n    this.inputs.forEach((input, i) => {\n      if (!input.prevOutType) {\n        throw new Error('Transaction is not complete');\n      }\n      const result = this.paymentBuild(input.prevOutType, input);\n      if (!result) {\n        if (input.prevOutType === SCRIPT_TYPES.NONSTANDARD) {\n          throw new Error('Unknown input type');\n        }\n        throw new Error('Not enough information');\n      }\n      tx.setInputScript(i, result.input);\n    });\n    return tx;\n  }\n\n  // eslint-disable-next-line consistent-return, no-shadow\n  paymentBuild(type, input) {\n    const pubkeys = input.pubkeys || [];\n    const signatures = input.signatures || [];\n    // eslint-disable-next-line default-case\n    switch (type) {\n      case SCRIPT_TYPES.P2PKH: {\n        if (pubkeys.length === 0) {\n          break;\n        }\n        if (signatures.length === 0) {\n          break;\n        }\n        return payments.p2pkh({ pubkey: pubkeys[0], signature: signatures[0], network: this.network });\n      }\n      case SCRIPT_TYPES.P2WPKH: {\n        if (pubkeys.length === 0) {\n          break;\n        }\n        if (signatures.length === 0) {\n          break;\n        }\n        return payments.p2wpkh({ pubkey: pubkeys[0], signature: signatures[0], network: this.network });\n      }\n      case SCRIPT_TYPES.P2PK: {\n        if (pubkeys.length === 0) {\n          break;\n        }\n        if (signatures.length === 0) {\n          break;\n        }\n        return payments.p2pk({ signature: signatures[0], network: this.network });\n      }\n      case SCRIPT_TYPES.P2SH: {\n        const redeem = this.paymentBuild(input.redeemScriptType, input);\n        if (!redeem) {\n          // eslint-disable-next-line consistent-return\n          return;\n        }\n        return payments.p2sh({\n          redeem: {\n            output: redeem.output || input.redeemScript,\n            input: redeem.input,\n          },\n          network: this.network,\n        });\n      }\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  canSign(input) {\n    return (\n      input.signScript !== undefined\n      && input.signType !== undefined\n      && input.pubkeys !== undefined\n      && input.signatures !== undefined\n      && input.signatures.length === input.pubkeys.length\n      && input.pubkeys.length > 0\n    );\n  }\n\n  prepareInput(input, ourPubKey) {\n    const prevOutScript = payments.p2pkh({ pubkey: ourPubKey, network: this.network }).output;\n    return {\n      prevOutType: SCRIPT_TYPES.P2PKH,\n      prevOutScript,\n      signScript: prevOutScript,\n      signType: SCRIPT_TYPES.P2PKH,\n      pubkeys: [ourPubKey],\n      signatures: [undefined],\n    };\n  }\n\n  needsOutputs(signingHashType) {\n    if (signingHashType === Sighash.SIGHASH_ALL) {\n      return this.litedogeTransaction.outputs.length === 0;\n    }\n    // if inputs are being signed with SIGHASH_NONE, we don't strictly need outputs\n    // .build() will fail, but .buildIncomplete() is OK\n    return (\n      this.litedogeTransaction.outputs.length === 0\n&& this.inputs.some((input) => {\n  if (!input.signatures) {\n    return false;\n  }\n  return input.signatures.some((signature) => {\n    if (!signature) {\n      return false;\n    } // no signature, no issue\n    const hashType = this.signatureHashType(signature);\n    // tslint:disable-next-line:no-bitwise\n    if (hashType & Sighash.SIGHASH_NONE) {\n      return false;\n    } // SIGHASH_NONE doesn't care about outputs\n    return true; // SIGHASH_* does care\n  });\n})\n    );\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  signatureHashType(buffer) {\n    return buffer.readUInt8(buffer.length - 1);\n  }\n}\n\nfunction output(outputScript) {\n  if (witnessPubKeyHash.output.check(outputScript)) {\n    return SCRIPT_TYPES.P2WPKH;\n  }\n  if (witnessScriptHash.output.check(outputScript)) {\n    return SCRIPT_TYPES.P2WSH;\n  }\n  if (pubKeyHash.output.check(outputScript)) {\n    return SCRIPT_TYPES.P2PKH;\n  }\n  if (scriptHash.output.check(outputScript)) {\n    return SCRIPT_TYPES.P2SH;\n  }\n  // XXX: optimization, below functions .decompile before use\n  const chunks = script.decompile(outputScript);\n  if (!chunks) {\n    throw new TypeError('Invalid script');\n  }\n  if (multisig.output.check(chunks)) {\n    return SCRIPT_TYPES.P2MS;\n  }\n  if (pubKey.output.check(chunks)) {\n    return SCRIPT_TYPES.P2PK;\n  }\n  if (witnessCommitment.output.check(chunks)) {\n    return SCRIPT_TYPES.WITNESS_COMMITMENT;\n  }\n  if (nullData.output.check(chunks)) {\n    return SCRIPT_TYPES.NULLDATA;\n  }\n  return SCRIPT_TYPES.NONSTANDARD;\n}\n\nfunction input(inputScript) {\n  // XXX: optimization, below functions .decompile before use\n  const chunks = script.decompile(inputScript);\n  if (!chunks) {\n    throw new TypeError('Invalid script');\n  }\n  if (pubKeyHash.input.check(chunks)) {\n    return SCRIPT_TYPES.P2PKH;\n  }\n  if (scriptHash.input.check(chunks)) {\n    return SCRIPT_TYPES.P2SH;\n  }\n  if (multisig.input.check(chunks)) {\n    return SCRIPT_TYPES.P2MS;\n  }\n  if (pubKey.input.check(chunks)) {\n    return SCRIPT_TYPES.P2PK;\n  }\n  return SCRIPT_TYPES.NONSTANDARD;\n}\n\nfunction toOutputScript(address, network) {\n  let decodeBase58;\n  try {\n    decodeBase58 = fromBase58Check(address);\n  } catch (e) {\n    console.error(e);\n  }\n  if (decodeBase58) {\n    if (decodeBase58.version === network.pubKeyHash) {\n      return payments.p2pkh({ hash: decodeBase58.hash }).output;\n    }\n    if (decodeBase58.version === network.scriptHash) {\n      return payments.p2sh({ hash: decodeBase58.hash }).output;\n    }\n  }\n  throw new Error(`${address} has no matching Script`);\n}\n\nfunction fromBase58Check(address) {\n  const payload = bs58check.decode(address);\n  if (payload.length < 21) {\n    throw new TypeError(`${address} is too short`);\n  }\n  if (payload.length > 21) {\n    throw new TypeError(`${address} is too long`);\n  }\n  const version = payload.readUInt8(0);\n  const hash = payload.slice(1);\n  return { version, hash };\n}\n","import { Transaction, crypto as bcrypto, script } from 'bitcoinjs-lib';\nimport * as varuint from 'varuint-bitcoin';\nimport LitedogeBufferwriter from '../utils/bufferWriter';\nimport LitedogeBufferutils from '../utils/bufferUtils';\n\nconst Sighash = {\n  SIGHASH_ALL: 1,\n  SIGHASH_NONE: 2,\n  SIGHASH_SINGLE: 3,\n  SIGHASH_ANYONECANPAY: 128,\n};\nconst EMPTY_SCRIPT = Buffer.allocUnsafe(0);\nconst ZERO = Buffer.from(\n  '0000000000000000000000000000000000000000000000000000000000000000',\n  'hex',\n);\nconst ONE = Buffer.from(\n  '0000000000000000000000000000000000000000000000000000000000000001',\n  'hex',\n);\nconst VALUE_UINT64_MAX = Buffer.from('ffffffffffffffff', 'hex');\nconst BLANK_OUTPUT = {\n  script: EMPTY_SCRIPT,\n  valueBuffer: VALUE_UINT64_MAX,\n};\n\nexport default class LitedogeTransaction extends Transaction {\n  /* inputs = [];\n  outputs = [];\n  time = 0; */\n  constructor(options) {\n    super(options);\n    this.inputs = [];\n    this.outputs = [];\n    this.time = 0;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  varSliceSize(someScript) {\n    const { length } = someScript;\n    return varuint.encodingLength(length) + length;\n  }\n\n  addInput(hash, index, sequence = LitedogeTransaction.DEFAULT_SEQUENCE, scriptSig) {\n    // Add the input and return the input's index\n    console.log('push', this);\n    return (\n      this.inputs.push({\n        hash,\n        index,\n        script: scriptSig || EMPTY_SCRIPT,\n        sequence,\n      }) - 1\n    );\n  }\n\n  addOutput(scriptPubKey, value) {\n    // Add the output and return the output's index\n    return (\n      this.outputs.push({\n        script: scriptPubKey,\n        value,\n      }) - 1\n    );\n  }\n\n  hashForSignature(inIndex, prevOutScript, hashType) {\n    if (inIndex >= this.inputs.length) {\n      return ONE;\n    }\n    // ignore OP_CODESEPARATOR\n    const ourScript = script.compile(\n      script.decompile(prevOutScript).filter((x) => x !== script.OPS.OP_CODESEPARATOR),\n    );\n    const txTmp = this.litedogeClone();\n    // SIGHASH_NONE: ignore all outputs? (wildcard payee)\n    // tslint:disable-next-line:no-bitwise\n    if ((hashType & 0x1f) === Sighash.SIGHASH_NONE) {\n      txTmp.outputs = [];\n      // ignore sequence numbers (except at inIndex)\n      txTmp.inputs.forEach((input, i) => {\n        if (i === inIndex) {\n          return;\n        }\n        // eslint-disable-next-line no-param-reassign\n        input.sequence = 0;\n      });\n      // SIGHASH_SINGLE: ignore all outputs, except at the same index?\n      // tslint:disable-next-line:no-bitwise\n    } else if ((hashType & 0x1f) === Sighash.SIGHASH_SINGLE) {\n      // https://github.com/bitcoin/bitcoin/blob/master/src/test/sighash_tests.cpp#L60\n      if (inIndex >= this.outputs.length) {\n        return ONE;\n      }\n      // truncate outputs after\n      txTmp.outputs.length = inIndex + 1;\n      // \"blank\" outputs before\n      for (let i = 0; i < inIndex; i++) {\n        txTmp.outputs[i] = BLANK_OUTPUT;\n      }\n      // ignore sequence numbers (except at inIndex)\n      txTmp.inputs.forEach((input, y) => {\n        if (y === inIndex) {\n          return;\n        }\n        // eslint-disable-next-line no-param-reassign\n        input.sequence = 0;\n      });\n    }\n    // SIGHASH_ANYONECANPAY: ignore inputs entirely?\n    // tslint:disable-next-line:no-bitwise\n    if (hashType & Transaction.SIGHASH_ANYONECANPAY) {\n      txTmp.inputs = [txTmp.inputs[inIndex]];\n      txTmp.inputs[0].script = ourScript;\n      // SIGHASH_ALL: only ignore input scripts\n    } else {\n      // \"blank\" others input scripts\n      txTmp.inputs.forEach((input) => {\n        // eslint-disable-next-line no-param-reassign\n        input.script = EMPTY_SCRIPT;\n      });\n      txTmp.inputs[inIndex].script = ourScript;\n    }\n    // serialize and hash\n    const buffer = Buffer.allocUnsafe(txTmp.byteLength() + 4);\n    buffer.writeInt32LE(hashType, buffer.length - 4);\n    txTmp.toLitedogeBuffer(buffer, 0);\n    return bcrypto.hash256(buffer);\n  }\n\n  hashForWitnessV0(inIndex, prevOutScript, value, hashType) {\n    let tbuffer = Buffer.from([]);\n    let bufferWriter;\n    let hashOutputs = ZERO;\n    let hashPrevouts = ZERO;\n    let hashSequence = ZERO;\n    // tslint:disable-next-line:no-bitwise\n    if (!(hashType & Sighash.SIGHASH_ANYONECANPAY)) {\n      tbuffer = Buffer.allocUnsafe(36 * this.inputs.length);\n      bufferWriter = new LitedogeBufferwriter(tbuffer, 0);\n      this.inputs.forEach((txIn) => {\n        bufferWriter.writeSlice(txIn.hash);\n        bufferWriter.writeUInt32(txIn.index);\n      });\n      hashPrevouts = bcrypto.hash256(tbuffer);\n    }\n    if (\n    // tslint:disable-next-line:no-bitwise\n      !(hashType & Sighash.SIGHASH_ANYONECANPAY)\n      // tslint:disable-next-line:no-bitwise\n      && (hashType & 0x1f) !== Sighash.SIGHASH_SINGLE\n      // tslint:disable-next-line:no-bitwise\n      && (hashType & 0x1f) !== Sighash.SIGHASH_NONE\n    ) {\n      tbuffer = Buffer.allocUnsafe(4 * this.inputs.length);\n      bufferWriter = new LitedogeBufferwriter(tbuffer, 0);\n      this.inputs.forEach((txIn) => {\n        bufferWriter.writeUInt32(txIn.sequence);\n      });\n      hashSequence = bcrypto.hash256(tbuffer);\n    }\n    if (\n    // tslint:disable-next-line:no-bitwise\n      (hashType & 0x1f) !== Sighash.SIGHASH_SINGLE\n      // tslint:disable-next-line:no-bitwise\n      && (hashType & 0x1f) !== Sighash.SIGHASH_NONE\n    ) {\n      // eslint-disable-next-line max-len\n      const txOutsSize = this.outputs.reduce((sum, output) => sum + 8 + this.varSliceSize(output.script), 0);\n      tbuffer = Buffer.allocUnsafe(txOutsSize);\n      bufferWriter = new LitedogeBufferwriter(tbuffer, 0);\n      this.outputs.forEach((out) => {\n        bufferWriter.writeUInt64(out.value);\n        bufferWriter.writeVarSlice(out.script);\n      });\n      hashOutputs = bcrypto.hash256(tbuffer);\n    } else if (\n    // tslint:disable-next-line:no-bitwise\n      (hashType & 0x1f) === Sighash.SIGHASH_SINGLE\n      && inIndex < this.outputs.length\n    ) {\n      const output = this.outputs[inIndex];\n      tbuffer = Buffer.allocUnsafe(8 + this.varSliceSize(output.script));\n      bufferWriter = new LitedogeBufferwriter(tbuffer, 0);\n      bufferWriter.writeUInt64(output.value);\n      bufferWriter.writeVarSlice(output.script);\n      hashOutputs = bcrypto.hash256(tbuffer);\n    }\n    tbuffer = Buffer.allocUnsafe(156 + this.varSliceSize(prevOutScript));\n    bufferWriter = new LitedogeBufferwriter(tbuffer, 0);\n    const input = this.inputs[inIndex];\n    bufferWriter.writeUInt32(this.version);\n    bufferWriter.writeUInt32(this.time);\n    bufferWriter.writeSlice(hashPrevouts);\n    bufferWriter.writeSlice(hashSequence);\n    bufferWriter.writeSlice(input.hash);\n    bufferWriter.writeUInt32(input.index);\n    bufferWriter.writeVarSlice(prevOutScript);\n    bufferWriter.writeUInt64(value);\n    bufferWriter.writeUInt32(input.sequence);\n    bufferWriter.writeSlice(hashOutputs);\n    bufferWriter.writeUInt32(this.locktime);\n    bufferWriter.writeUInt32(hashType);\n    return bcrypto.hash256(tbuffer);\n  }\n\n  litedogeClone() {\n    const newTx = new LitedogeTransaction();\n    newTx.version = this.version;\n    newTx.time = this.time;\n    newTx.locktime = this.locktime;\n    newTx.inputs = this.inputs.map((txIn) => ({\n      hash: txIn.hash,\n      index: txIn.index,\n      script: txIn.script,\n      sequence: txIn.sequence,\n    }));\n    newTx.outputs = this.outputs.map((txOut) => ({\n      script: txOut.script,\n      value: txOut.value,\n    }));\n    return newTx;\n  }\n\n  getHash() {\n    return bcrypto.hash256(this.toLitedogeBuffer());\n  }\n\n  getId() {\n    // transaction hash's are displayed in reverse order\n    return LitedogeBufferutils.reverseBuffer(this.getHash()).toString('hex');\n  }\n\n  toBuffer(buffer, initialOffset) {\n    return this.toLitedogeBuffer(buffer, initialOffset);\n  }\n\n  toHex() {\n    return this.toBuffer().toString('hex');\n  }\n\n  setInputScript(index, scriptSig) {\n    this.inputs[index].script = scriptSig;\n  }\n\n  byteLength() {\n    return (\n      4 // version\n      + 4 // time\n      + varuint.encodingLength(this.inputs.length)\n      + varuint.encodingLength(this.outputs.length)\n      + this.inputs.reduce((sum, input) => sum + 40 + this.varSliceSize(input.script), 0)\n      + this.outputs.reduce((sum, output) => sum + 8 + this.varSliceSize(output.script), 0)\n      + 4 // locktime\n    );\n  }\n\n  toLitedogeBuffer(buffer, initialOffset) {\n    if (!buffer) {\n      // eslint-disable-next-line no-param-reassign\n      buffer = Buffer.allocUnsafe(this.byteLength());\n    }\n    const bufferWriter = new LitedogeBufferwriter(\n      buffer,\n      initialOffset || 0,\n    );\n\n    bufferWriter.writeUInt32(this.version);\n    bufferWriter.writeUInt32(this.time);\n    bufferWriter.writeVarInt(this.inputs.length);\n    this.inputs.forEach((txIn) => {\n      bufferWriter.writeSlice(txIn.hash);\n      bufferWriter.writeUInt32(txIn.index);\n      bufferWriter.writeVarSlice(txIn.script);\n      bufferWriter.writeUInt32(txIn.sequence);\n    });\n    bufferWriter.writeVarInt(this.outputs.length);\n    this.outputs.forEach((txOut) => {\n      if (this.isOutput(txOut)) {\n        bufferWriter.writeUInt64(txOut.value);\n      } else {\n        bufferWriter.writeSlice(txOut.valueBuffer);\n      }\n      bufferWriter.writeVarSlice(txOut.script);\n    });\n    bufferWriter.writeUInt32(this.locktime);\n    // avoid slicing unless necessary\n    if (initialOffset !== undefined) {\n      return buffer.slice(initialOffset, bufferWriter.offset);\n    }\n    return buffer;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  isOutput(out) {\n    return out.value !== undefined;\n  }\n}\n","const liteDogeNetwork = {\n  messagePrefix: '\\x18LiteDoge Signed Message:\\n',\n  // LiteDoge doesn't seem to have bech32 yet\n  bech32: null,\n  bip32: {\n    // data from EXT_PUBLIC_KEY\n    public: 0x0488B21E,\n    // data from EXT_SECRET_KEY\n    private: 0x0488ADE4,\n  },\n  // data from PUBKEY_ADDRESS\n  pubKeyHash: 0x5a,\n  // data from SCRIPT_ADDRESS\n  scriptHash: 0x07,\n  // Seems like this should be correct\n  wif: 0xab,\n};\nconst liteDogeCurrency = {\n  name: 'LiteDoge',\n  networkVersion: 0x5a,\n  network: liteDogeNetwork,\n  privateKeyPrefix: 0xab,\n  WIF_Start: '6',\n  CWIF_Start: 'S',\n};\n\nconst proxyWalletUrl = 'https://wallet-proxy.ldoge-wow.com';\nconst apiUrl = 'https://explorer.ldoge-wow.com';\nconst lDogeDenominator = 100000000;\nconst minFee = 10000000;\nconst ldogeLocktime = 0;\nconst ldogeVersion = 1;\n\nexport {\n  liteDogeCurrency,\n  liteDogeNetwork,\n  proxyWalletUrl,\n  apiUrl,\n  lDogeDenominator,\n  minFee,\n  ldogeLocktime,\n  ldogeVersion,\n};\n","export default class unspentTransaction {\n  constructor(options) {\n    return {\n      txid: options.txid,\n      vout: options.vout,\n      address: options.address,\n      scriptPubKey: options.scriptPubKey,\n      amount: options.amount,\n      confirmations: options.confirmations,\n      spendable: options.spendable,\n      solvable: options.solvable,\n    };\n  }\n}\n","class InsufficientLitedoge extends Error {\n}\n\nexport {\n  // eslint-disable-next-line import/prefer-default-export\n  InsufficientLitedoge,\n};\n","import { getBalance, getUnspentTransactions, pushTransactionHex } from '../utils/walletProxy';\nimport {\n  lDogeDenominator, ldogeLocktime, ldogeVersion, minFee, liteDogeNetwork,\n} from '../utils/Constants';\n// eslint-disable-next-line import/no-named-as-default\nimport LitedogeBuilder from './lDogeBuilder';\nimport { InsufficientLitedoge } from './Errors';\n\nclass Wallet {\n  constructor(keyPair, address, wifData) {\n    this.keyPair = keyPair;\n    this.pLiteDogeAddress = address;\n    this.pLiteDogeWif = wifData;\n  }\n\n  get litedogeAddress() {\n    return this.pLiteDogeAddress;\n  }\n\n  get litedogePubKey() {\n    return this.keyPair.publicKey;\n  }\n\n  get litedogeWifPrivateKey() {\n    return this.pLiteDogeWif;\n  }\n\n  /**\n   * @returns {ECPairInterface}\n   */\n  get liteDogeKeyPair() {\n    return this.keyPair;\n  }\n\n  balance() {\n    return getBalance(this.litedogeAddress);\n  }\n\n  unspentTransactions() {\n    return getUnspentTransactions(this.litedogeAddress);\n  }\n\n  async createPayment(receiverAddress, amount) {\n    const amountInSats = Math.floor(amount * lDogeDenominator);\n    const amountAndFees = amountInSats + minFee;\n    const signer = this.liteDogeKeyPair;\n\n    const unspentTransactions = await this.unspentTransactions();\n    const referencedTransactions = [];\n\n    let totalInputAmount = 0;\n    for (const unspentTransaction of unspentTransactions) {\n      if (unspentTransaction.spendable) {\n        totalInputAmount += Math.floor(unspentTransaction.amount * lDogeDenominator);\n        referencedTransactions.push(unspentTransaction);\n        // Check if there's sufficient being referenced\n        if (totalInputAmount >= amountAndFees) {\n          break;\n        }\n      }\n    }\n    const returnToSenderAmount = totalInputAmount - amountAndFees;\n\n    // Has enough LiteDoges\n    if (returnToSenderAmount >= 0) {\n      try {\n        const transactionBuilder = new LitedogeBuilder(liteDogeNetwork);\n        transactionBuilder.setLockTime(ldogeLocktime);\n        transactionBuilder.setTimeToCurrentTime();\n        transactionBuilder.setVersion(ldogeVersion);\n        transactionBuilder.setLowR(false);\n        // Add sources from previous transactions hash\n        referencedTransactions.forEach((referencedTransaction) => {\n          transactionBuilder.addInput(referencedTransaction.txid, referencedTransaction.vout);\n        });\n        // Add output address\n        transactionBuilder.addOutput(receiverAddress, amountInSats);\n        // Send remaining LiteDoges back to sender address\n        if (returnToSenderAmount > 0) {\n          transactionBuilder.addOutput(this.litedogeAddress, returnToSenderAmount);\n        }\n        for (let i = 0; i < referencedTransactions.length; i++) {\n          transactionBuilder.sign(i, signer);\n        }\n        const transaction = transactionBuilder.build();\n        const transactionHex = transaction.toHex();\n\n        return await pushTransactionHex(transactionHex);\n      } catch (e) {\n        console.error(e);\n      }\n    } else {\n      throw new InsufficientLitedoge();\n    }\n    return false;\n  }\n}\n\nexport default Wallet;\n","import { apiUrl, proxyWalletUrl } from './Constants';\nimport UnspentTransaction from '../structures/unspentTransaction';\n\nfunction getBalance(address) {\n  return fetch(`${apiUrl}/ext/getbalance/${address}`, {\n    method: 'GET',\n  }).then((x) => x.text());\n}\n\nfunction getUnspentTransactions(address) {\n  return fetch(`${proxyWalletUrl}/addresses/${address}/unspent`, {\n    method: 'GET',\n  }).then((x) => x.json()).then((json) => {\n    const { data } = json;\n    const unspentTransactions = data.map((raw) => new UnspentTransaction(raw));\n    return unspentTransactions;\n  });\n}\n\nfunction pushTransactionHex(hex) {\n  return fetch(`${proxyWalletUrl}/transactions`, {\n    method: 'POST',\n    body: JSON.stringify({\n      transactionData: hex,\n    }),\n  });\n}\nexport {\n  getBalance,\n  getUnspentTransactions,\n  pushTransactionHex,\n};\n","/** @jsxImportSource theme-ui */\nimport React, { useEffect, useState } from 'react';\nimport $ from 'jquery';\n\nconst currencyFiat = 'usd';\n\nfunction Wallet(props) {\n  const { wallet } = props;\n  const [sendMode, setSendMode] = useState(false);\n  const [receiveMode, setReceiveMode] = useState(false);\n  const [ldogeUSDRate, setRate] = useState(0);\n  const [walletBalance, setBalance] = useState(0);\n  const [ldogeAmount, setAmount] = useState(0);\n  const [usdAmount, setUSDAmount] = useState(0);\n\n  const setAmountHook = (val) => {\n    const value = Math.abs(val);\n    setAmount(value);\n    setUSDAmount(value * ldogeUSDRate);\n  };\n\n  const setUSDAmountHook = (val) => {\n    const value = Math.abs(val);\n    setUSDAmount(value);\n    setAmount(value / ldogeUSDRate);\n  };\n\n  useEffect(() => {\n    fetch('https://api.coingecko.com/api/v3/coins/litedoge')\n      .then((x) => x.json())\n      .then((x) => x.market_data.current_price)\n      .then((x) => {\n        setRate(x[currencyFiat]);\n      });\n  }, [ldogeUSDRate]);\n\n  useEffect(() => {\n    wallet?.balance().then(setBalance);\n  }, [wallet]);\n\n  useEffect(() => {\n    $('#send').on('click', () => {\n      setSendMode(!sendMode);\n    });\n\n    $('#receive').on('click', () => {\n      setReceiveMode(!receiveMode);\n    });\n\n    const receiverAddr = $('#receiverAddress');\n    if (receiverAddr?.val() && ldogeAmount) {\n      $('#sendAmount').attr('disabled', false).on('click', async () => {\n        wallet.createPayment(receiverAddr.val(), ldogeAmount);\n      });\n    }\n  });\n\n  useEffect(() => {\n    const inputAmount = $('#inputAmount');\n    if (walletBalance >= ldogeAmount) {\n      inputAmount.addClass('okay');\n      inputAmount.removeClass('notokay');\n    } else {\n      inputAmount.addClass('notokay');\n      inputAmount.removeClass('okay');\n    }\n  }, [ldogeAmount]);\n\n  const show = !!wallet;\n  const defaultView = !sendMode && !receiveMode;\n\n  if (!show) return <div />;\n\n  if (defaultView) {\n    return (\n      <div>\n        test\n        <p className=\"publicAddress\">\n          {wallet?.pLiteDogeAddress.toString()}\n        </p>\n        <button type=\"submit\" id=\"send\">\n          Send\n        </button>\n        <button type=\"submit\" id=\"receive\">\n          Receive\n        </button>\n      </div>\n    );\n  }\n\n  if (receiveMode) {\n    return (\n      <div sx={{\n        display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center',\n      }}\n      >\n        <p className=\"publicAddress\">\n          {wallet.pLiteDogeAddress}\n        </p>\n        <img src={`https://explorer.ldoge-wow.com/qr/${wallet.pLiteDogeAddress}`} sx={{ justifyContent: 'center' }} alt=\"scan this qr\" height=\"300px\" width=\"300px\" />\n        <button type=\"submit\" id=\"receive\" sx={{ flexShrink: 2 }}> Back </button>\n      </div>\n    );\n  }\n\n  return (\n    <div sx={{\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      alignItems: 'center',\n    }}\n    >\n      <p>\n        Your Balance is\n        {` ${walletBalance} `}\n      </p>\n      <label htmlFor=\"address\">\n        Receiver Address\n      </label>\n      <input type=\"text\" name=\"address\" id=\"receiverAddress\" />\n      <label htmlFor=\"amount\">\n        Amount To send\n      </label>\n      <div id=\"inputAmount\" sx={{ display: 'flex' }}>\n        <div>\n          Coins\n          <input\n            type=\"number\"\n            name=\"amount\"\n            value={ldogeAmount}\n            onChange={(event) => setAmountHook(event.target.value)}\n            sx={{\n              flexShrink: 4,\n            }}\n          />\n        </div>\n        <div sx={{ display: 'flex', alignItems: 'center' }}>\n          USD\n          <input\n            type=\"number\"\n            name=\"amount\"\n            value={usdAmount}\n            onChange={(event) => setUSDAmountHook(event.target.value)}\n            sx={{\n              flexShrink: 4,\n            }}\n          />\n        </div>\n      </div>\n      <button type=\"submit\" id=\"sendAmount\" sx={{ flexShrink: 2 }} disabled> Send </button>\n      <button type=\"submit\" id=\"send\" sx={{ flexShrink: 2 }}> Back </button>\n    </div>\n  );\n}\nexport default Wallet;\n","/** @jsxImportSource theme-ui */\nimport './css/App.css';\nimport React, { useEffect, useState } from 'react';\nimport $ from 'jquery';\n\n// eslint-disable-next-line no-unused-vars\nimport { generateWallet, importWallet } from './crypto/utils/walletUtils';\n\nimport Wallet from './components/Wallet';\n\nfunction App() {\n  // eslint-disable-next-line prefer-const\n  let [wallet, setWallet] = useState(undefined);\n\n  useEffect(() => {\n    $('#importWallet').on('click', () => {\n      const walletPrivateKey = $('#walletPrivateKey').val();\n      const importedWallet = importWallet(walletPrivateKey);\n      wallet = importedWallet;\n      setWallet(importedWallet);\n      $('#walletImportDiv').css('display', 'none');\n    });\n  }, [wallet]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src=\"icon.png\" className=\"App-logo\" alt=\"logo\" />\n        <div id=\"walletImportDiv\" sx={{ display: wallet ? 'none' : 'block' }}>\n          <label htmlFor=\"key\">\n            Enter Wallet Private Key\n          </label>\n          <input name=\"key\" id=\"walletPrivateKey\" />\n          <button type=\"submit\" id=\"importWallet\">Import</button>\n        </div>\n        <Wallet wallet={wallet} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ECPair, payments } from 'bitcoinjs-lib';\nimport Wallet from '../structures/Wallet';\nimport { liteDogeNetwork } from './Constants';\n\nfunction generateWallet() {\n  const ecPairOptions = {\n    network: liteDogeNetwork,\n  };\n  const keyPair = ECPair.makeRandom(ecPairOptions);\n  // eslint-disable-next-line max-len\n  const { address } = payments.p2pkh({ pubkey: keyPair.publicKey, network: liteDogeNetwork }, { validate: true });\n  const wifKeyPair = keyPair.toWIF();\n\n  return new Wallet(keyPair, address, wifKeyPair);\n}\nfunction importWallet(privateKey) {\n  const importedKeyPair = ECPair.fromWIF(privateKey, liteDogeNetwork);\n  // eslint-disable-next-line max-len\n  const { address } = payments.p2pkh({ pubkey: importedKeyPair.publicKey, network: liteDogeNetwork }, { validate: true });\n\n  return new Wallet(importedKeyPair, address, privateKey);\n}\nexport {\n  generateWallet,\n  importWallet,\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from 'theme-ui';\n\nimport './css/index.css';\nimport App from './App';\nimport theme from './theme';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// example theme.js\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default {\n  fonts: {\n    body: 'system-ui, sans-serif',\n    heading: '\"Avenir Next\", sans-serif',\n    monospace: 'Menlo, monospace',\n  },\n  colors: {\n    text: '#000',\n    background: '#fff',\n    primary: '#33e',\n  },\n};\n","import * as varuint from 'varuint-bitcoin';\n\nexport default class LitedogeBufferwriter {\n  constructor(buffer, offset = 0) {\n    this.buffer = buffer;\n    this.offset = offset;\n  }\n\n  writeUInt8(i) {\n    this.offset = this.buffer.writeUInt8(i, this.offset);\n  }\n\n  writeInt32(i) {\n    this.offset = this.buffer.writeInt32LE(i, this.offset);\n  }\n\n  writeUInt32(i) {\n    this.offset = this.buffer.writeUInt32LE(i, this.offset);\n  }\n\n  writeUInt64(i) {\n    this.offset = this.writeUInt64LE(this.buffer, i, this.offset);\n  }\n\n  writeVarInt(i) {\n    varuint.encode(i, this.buffer, this.offset);\n    this.offset += varuint.encode.bytes;\n  }\n\n  writeSlice(slice) {\n    if (this.buffer.length < this.offset + slice.length) {\n      throw new Error('Cannot write slice out of bounds');\n    }\n    this.offset += slice.copy(this.buffer, this.offset);\n  }\n\n  writeVarSlice(slice) {\n    this.writeVarInt(slice.length);\n    this.writeSlice(slice);\n  }\n\n  writeVector(vector) {\n    this.writeVarInt(vector.length);\n    vector.forEach((buf) => this.writeVarSlice(buf));\n  }\n\n  writeUInt64LE(buffer, value, offset) {\n    this.verifuint(value, 0x001fffffffffffff);\n    // tslint:disable-next-line:no-bitwise\n    buffer.writeInt32LE(value & -1, offset);\n    buffer.writeUInt32LE(Math.floor(value / 0x100000000), offset + 4);\n    return offset + 8;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  verifuint(value, max) {\n    if (typeof value !== 'number') {\n      throw new Error('cannot write a non-number as a number');\n    }\n    if (value < 0) {\n      throw new Error('specified a negative value for writing an unsigned value');\n    }\n    if (value > max) {\n      throw new Error('RangeError: value out of range');\n    }\n    if (Math.floor(value) !== value) {\n      throw new Error('value has a fractional component');\n    }\n  }\n}\n","/* eslint-disable no-param-reassign */\nfunction reverseBuffer(buffer) {\n  if (buffer.length < 1) {\n    return buffer;\n  }\n  let j = buffer.length - 1;\n  let tmp = 0;\n  for (let i = 0; i < buffer.length / 2; i++) {\n    tmp = buffer[i];\n    buffer[i] = buffer[j];\n    buffer[j] = tmp;\n    j--;\n  }\n  return buffer;\n}\n\nexport default {\n  reverseBuffer,\n};\n"],"sourceRoot":""}